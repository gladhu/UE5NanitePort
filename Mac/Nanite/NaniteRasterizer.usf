// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneData.ush"
#include "NaniteDataDecode.ush"
#include "../VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
#include "../VirtualShadowMaps/VirtualShadowMapStaticCaching.ush"
#include "NaniteWritePixel.ush"

#if IS_NANITE_RASTER_PASS

#include "/Engine/Generated/Material.ush"
#include "NaniteVertexFactory.ush"

#endif

#define SUBPIXEL_BITS				8
#define SUBPIXEL_SAMPLES			(1 << SUBPIXEL_BITS)
#define SUBPIXEL_MASK				(SUBPIXEL_SAMPLES - 1)
#define SUBPIXEL_DILATE				0	// To correct for mismatch with HW rasterizer

#if VISUALIZE
uint VisualizeModeBitMask;

uint2 GetVisualizeValues()
{
	uint VisualizeValueMax = 0; // InterlockedMax64 using depth (value associated with surviving fragment)
	uint VisualizeValueAdd = 0; // InterlockedAdd32 (value accumulated with every evaluated fragment)
	
	if (VisualizeModeBitMask & VISUALIZE_RASTER_MODE)
	{
	#if SOFTWARE_RASTER
		VisualizeValueMax = 2; // Software Raster
	#else
		VisualizeValueMax = 1; // Hardware Raster
	#endif
	}

	if (VisualizeModeBitMask & VISUALIZE_OVERDRAW)
	{
		VisualizeValueAdd = 1;
	}

	return uint2(VisualizeValueMax, VisualizeValueAdd);
}
#endif

struct FRaster
{
	FNaniteView	NaniteView;
	int4		ViewRect;
#if VISUALIZE
	uint2		VisualizeValues;
#endif
	WritePixelPageTranslation PageTranslation;
};

void WritePixel( uint PixelValue, uint2 PixelPos, float DeviceZ, FRaster Raster )
{
	WritePixel( OutVisBuffer64, PixelValue, PixelPos, DeviceZ, Raster.PageTranslation );
#if VISUALIZE
	WritePixel( OutDbgBuffer64, Raster.VisualizeValues.x, PixelPos, DeviceZ, Raster.PageTranslation );
	//InterlockedAdd( OutDbgBuffer32[ PixelPos ], Raster.VisualizeValues.y );
    OutDbgBuffer32[PixelPos] += Raster.VisualizeValues.y;
#endif
}

struct FRasterTri
{
	int2	MinPixel;
	int2	MaxPixel;

	float2	Edge01;
	float2	Edge12;
	float2	Edge20;

	float	C0;
	float	C1;
	float	C2;

	float3	DepthPlane;

	bool	bIsValid;
};

FRasterTri SetupTriangle( FRaster Raster, float3 Verts[3] )
{
	FRasterTri Tri;
	Tri.bIsValid = true;
	
	float3 v01 = Verts[1] - Verts[0];
	float3 v02 = Verts[2] - Verts[0];

	float DetXY = v01.x * v02.y - v01.y * v02.x;
	if( DetXY >= 0.0f )
	{
		// Backface
		// If not culling, need to swap verts to correct winding for rest of code
		Tri.bIsValid = false;
	}

	float InvDet = rcp( DetXY );
	float2 GradZ;
	GradZ.x = ( v01.z * v02.y - v01.y * v02.z ) * InvDet;
	GradZ.y = ( v01.x * v02.z - v01.z * v02.x ) * InvDet;

	// 16.8 fixed point
	float2 Vert0 = Verts[0].xy;
	float2 Vert1 = Verts[1].xy;
	float2 Vert2 = Verts[2].xy;

	// Bounding rect
	const float2 MinSubpixel = min3( Vert0, Vert1, Vert2 );
	const float2 MaxSubpixel = max3( Vert0, Vert1, Vert2 );

#if 0
	bool2 bMissCenter =	( MinSubpixel & SUBPIXEL_MASK > (SUBPIXEL_SAMPLES / 2) ) &&
						( MaxSubpixel - ( MinSubpixel & ~SUBPIXEL_MASK ) + (SUBPIXEL_SAMPLES / 2) ) < SUBPIXEL_MASK;
	if( any( bMissCenter ) )
		Tri.bIsValid = false;
#endif

	// Round to nearest pixel
	Tri.MinPixel = (int2)floor( ( MinSubpixel + (SUBPIXEL_SAMPLES / 2) - 1 ) * (1.0 / SUBPIXEL_SAMPLES) );
	Tri.MaxPixel = (int2)floor( ( MaxSubpixel - (SUBPIXEL_SAMPLES / 2) - 1 ) * (1.0 / SUBPIXEL_SAMPLES) );	// inclusive!

	// Clip to viewport
	Tri.MinPixel = max( Tri.MinPixel, Raster.ViewRect.xy );
	Tri.MaxPixel = min( Tri.MaxPixel, Raster.ViewRect.zw - 1 );
	
	// Force 1 pixel
	//MaxPixel = max( MaxPixel, MinPixel );
	
	// Cull when no pixels covered
	if( any( Tri.MinPixel > Tri.MaxPixel ) )
		Tri.bIsValid = false;

	// Limit the rasterizer bounds to a sensible max.
	Tri.MaxPixel = min( Tri.MaxPixel, Tri.MinPixel + 63 );

	// 4.8 fixed point
	Tri.Edge01 = -v01.xy;
	Tri.Edge12 = Vert1 - Vert2;
	Tri.Edge20 = v02.xy;
	
	// Rebase off MinPixel with half pixel offset
	// 4.8 fixed point
	// Max triangle size = 127x127 pixels
	const float2 BaseSubpixel = (float2)Tri.MinPixel * SUBPIXEL_SAMPLES + (SUBPIXEL_SAMPLES / 2);
	Vert0 -= BaseSubpixel;
	Vert1 -= BaseSubpixel;
	Vert2 -= BaseSubpixel;

	// Half-edge constants
	// 8.16 fixed point
	Tri.C0 = Tri.Edge01.y * Vert0.x - Tri.Edge01.x * Vert0.y;
	Tri.C1 = Tri.Edge12.y * Vert1.x - Tri.Edge12.x * Vert1.y;
	Tri.C2 = Tri.Edge20.y * Vert2.x - Tri.Edge20.x * Vert2.y;

	// Correct for fill convention
	// Top left rule for CCW
#if 1
	Tri.C0 -= saturate( Tri.Edge01.y + saturate( 1.0f - Tri.Edge01.x ) );
	Tri.C1 -= saturate( Tri.Edge12.y + saturate( 1.0f - Tri.Edge12.x ) );
	Tri.C2 -= saturate( Tri.Edge20.y + saturate( 1.0f - Tri.Edge20.x ) );
#else
	Tri.C0 -= ( Tri.Edge01.y < 0 || ( Tri.Edge01.y == 0 && Tri.Edge01.x > 0 ) ) ? 0 : 1;
	Tri.C1 -= ( Tri.Edge12.y < 0 || ( Tri.Edge12.y == 0 && Tri.Edge12.x > 0 ) ) ? 0 : 1;
	Tri.C2 -= ( Tri.Edge20.y < 0 || ( Tri.Edge20.y == 0 && Tri.Edge20.x > 0 ) ) ? 0 : 1;
#endif

	float Z0 = Verts[0].z - ( GradZ.x * Vert0.x + GradZ.y * Vert0.y );
	GradZ *= SUBPIXEL_SAMPLES;
	
	Tri.DepthPlane = float3( GradZ, Z0 );

#if 0
	// Step in pixel increments
	// 8.16 fixed point
	Tri.Edge01 *= SUBPIXEL_SAMPLES;
	Tri.Edge12 *= SUBPIXEL_SAMPLES;
	Tri.Edge20 *= SUBPIXEL_SAMPLES;
#else
	// Scale C0/C1/C2 down by SubpixelSamples instead of scaling Edge01/Edge12/Edge20 up. Lossless because SubpixelSamples is a power of two.
	Tri.C0 *= (1.0f / SUBPIXEL_SAMPLES);
	Tri.C1 *= (1.0f / SUBPIXEL_SAMPLES);
	Tri.C2 *= (1.0f / SUBPIXEL_SAMPLES);
#endif

	return Tri;
}

void RasterizeTri_Rect( FRaster Raster, FRasterTri Tri, uint PixelValue )
{
	float CY0 = Tri.C0;
	float CY1 = Tri.C1;
	float CY2 = Tri.C2;
	float ZY  = Tri.DepthPlane.z;

	int y = Tri.MinPixel.y;
	while (true)
	{
		int x = Tri.MinPixel.x;
		if (min3(CY0, CY1, CY2) >= 0)
		{
			WritePixel( PixelValue, uint2(x,y), ZY, Raster );
		}

		if (x < Tri.MaxPixel.x)
		{
			float CX0 = CY0 - Tri.Edge01.y;
			float CX1 = CY1 - Tri.Edge12.y;
			float CX2 = CY2 - Tri.Edge20.y;
			float ZX  = ZY  + Tri.DepthPlane.x;
			x++;

			HOIST_DESCRIPTORS
			while (true)
			{
				if (min3(CX0, CX1, CX2) >= 0)
				{
					WritePixel( PixelValue, uint2(x,y), ZX, Raster );
				}

				if (x >= Tri.MaxPixel.x)
					break;

				CX0 -= Tri.Edge01.y;
				CX1 -= Tri.Edge12.y;
				CX2 -= Tri.Edge20.y;
				ZX  += Tri.DepthPlane.x;
				x++;
			}
		}

		if (y >= Tri.MaxPixel.y)
			break;

		CY0 += Tri.Edge01.x;
		CY1 += Tri.Edge12.x;
		CY2 += Tri.Edge20.x;
		ZY  += Tri.DepthPlane.y;
		y++;
	}
}

void RasterizeTri_RectSingle( FRaster Raster, FRasterTri Tri, uint PixelValue )
{
	float CY0 = Tri.C0;
	float CY1 = Tri.C1;
	float CY2 = Tri.C2;
	float ZY  = Tri.DepthPlane.z;

	float CX0 = CY0;
	float CX1 = CY1;
	float CX2 = CY2;
	float ZX  = ZY;
	
	int x = Tri.MinPixel.x;
	int y = Tri.MinPixel.y;

	HOIST_DESCRIPTORS
	while( true )
	{
		if( min3( CX0, CX1, CX2 ) >= 0 )
		{
			WritePixel( PixelValue, uint2(x,y), ZX, Raster );
		}

		if( x < Tri.MaxPixel.x )
		{
			CX0 -= Tri.Edge01.y;
			CX1 -= Tri.Edge12.y;
			CX2 -= Tri.Edge20.y;
			ZX  += Tri.DepthPlane.x;
			x++;
		}
		else if( y < Tri.MaxPixel.y )
		{
			CY0 += Tri.Edge01.x;
			CY1 += Tri.Edge12.x;
			CY2 += Tri.Edge20.x;
			ZY  += Tri.DepthPlane.y;
			y++;
			
			CX0 = CY0;
			CX1 = CY1;
			CX2 = CY2;
			ZX  = ZY;
			x = Tri.MinPixel.x;
		}
		else
		{
			break;
		}
	}
}

void RasterizeTri_Scanline( FRaster Raster, FRasterTri Tri, uint PixelValue )
{
	float CY0 = Tri.C0;
	float CY1 = Tri.C1;
	float CY2 = Tri.C2;
	float ZY  = Tri.DepthPlane.z;

	float3 Edge012 = { Tri.Edge01.y, Tri.Edge12.y, Tri.Edge20.y };
	bool3 bOpenEdge = Edge012 < 0;
	float3 InvEdge012 = Edge012 == 0 ? 1e8 : rcp( Edge012 );

	int y = Tri.MinPixel.y;
	while( true )
	{
		//float CX0 = CY0 - Edge01.y * (x - MinPixel.x);
		// Edge01.y * (x - MinPixel.x) <= CY0;

		/*
		if( Edge01.y > 0 )
			x <= CY0 / Edge01.y + MinPixel.x;	// Closing edge
		else
			x >= CY0 / Edge01.y + MinPixel.x;	// Opening edge
		*/
			
		// No longer fixed point
		float3 CrossX = float3( CY0, CY1, CY2 ) * InvEdge012;

		float3 MinX = bOpenEdge ? CrossX : 0;
		float3 MaxX = bOpenEdge ? Tri.MaxPixel.x - Tri.MinPixel.x : CrossX;

		float x0 = ceil( max3( MinX.x, MinX.y, MinX.z ) );
		float x1 = min3( MaxX.x, MaxX.y, MaxX.z );
		float ZX = ZY + Tri.DepthPlane.x * x0;

		x0 += Tri.MinPixel.x;
		x1 += Tri.MinPixel.x;
		for( float x = x0; x <= x1; x++ )
		{
			WritePixel( PixelValue, uint2(x,y), ZX, Raster );

			ZX += Tri.DepthPlane.x;
		}

		if( y >= Tri.MaxPixel.y )
			break;

		CY0 += Tri.Edge01.x;
		CY1 += Tri.Edge12.x;
		CY2 += Tri.Edge20.x;
		ZY  += Tri.DepthPlane.y;
		y++;
	}
}

#if NANITE_USE_CONSTRAINED_CLUSTERS
groupshared float3 GroupVerts[256];
#else
groupshared float3 GroupVerts[384];
#endif

uint EdgeToTileMask( float2 Edge, float C, int2 TileOffset )
{
	C -= Edge.y * TileOffset.x;
	C += Edge.x * TileOffset.y;

	float InvEdgeY = Edge.y == 0.0f ? 1e8f : rcp( Edge.y );
	bool bOpenEdge = Edge.y < 0.0f;
	
	uint TileMask = 0;

	UNROLL
	for( uint y = 0; y < 4; y++ )
	{
		//float CX0 = CY0 - Edge01.y * (x - MinPixel.x);
		// Edge01.y * (x - MinPixel.x) <= CY0;

		/*
		if( Edge01.y > 0 )
			x <= CY0 / Edge01.y + MinPixel.x;	// Closing edge
		else
			x >= CY0 / Edge01.y + MinPixel.x;	// Opening edge
		*/
		
		// No longer fixed point
		float CrossX = C * InvEdgeY;
#if 0
		if( bOpenEdge )
		{
			uint x0 = uint( clamp( ceil( CrossX ), 0, 8 ) );
			uint LineMask = ( 255 << x0 ) & 255;
			TileMask |= LineMask << (8 * y);
		}
		else
		{
			//uint x1 = uint( clamp( 7 - floor( CrossX ), 0, 8 ) );
			uint x1 = uint( clamp( ceil( 7 - CrossX ), 0, 8 ) );
			uint LineMask = 255 >> x1;
			TileMask |= LineMask << (8 * y);
		}
#else
		uint x0 = uint( clamp( ceil( CrossX ), 0, 8 ) );
		uint LineMask = ( 255 << x0 ) & 255;
		TileMask |= LineMask << (8 * y);
#endif

		C += Edge.x;
	}

	// FIXME Fill convention. Does not pixel match.
	TileMask ^= bOpenEdge ? 0 : ~0u;

	return TileMask;
}

int FindSetBit( uint Mask, int Index )
{
	int Last = countbits( Mask ) - Index - 1;

	uint p = 16;
	p += countbits( Mask >> p ) <= Last ? -8 : 8;
	p += countbits( Mask >> p ) <= Last ? -4 : 4;
	p += countbits( Mask >> p ) <= Last ? -2 : 2;
	p += countbits( Mask >> p ) <= Last ? -1 : 1;
	p  = countbits( Mask >> p ) == Last ? (p - 1) : p;
	return p;
}


struct FWorkContext
{
	FRaster		Raster;
	FRasterTri	Tri;
	
	uint	PixelValue;
	int2	TilePos;
	int2	MaxTile;
};

struct FWorkSourceType
{
	uint	TileID;
	uint	TileMask;
};

uint GenerateWork( inout FWorkContext Context, uint GroupIndex, inout FWorkSourceType WorkSource, inout bool bDone )
{
	bDone = bDone || !Context.Tri.bIsValid;

	if( !bDone )
	{
		WorkSource.TileID  = GroupIndex;
		WorkSource.TileID |= Context.TilePos.x << 8;
		WorkSource.TileID |= Context.TilePos.y << 20;

		WorkSource.TileMask  = EdgeToTileMask( Context.Tri.Edge01, Context.Tri.C0, Context.TilePos );
		WorkSource.TileMask &= EdgeToTileMask( Context.Tri.Edge12, Context.Tri.C1, Context.TilePos );
		WorkSource.TileMask &= EdgeToTileMask( Context.Tri.Edge20, Context.Tri.C2, Context.TilePos );

		if( Context.TilePos.x < Context.MaxTile.x )
		{
			Context.TilePos.x += 8;
		}
		else if( Context.TilePos.y < Context.MaxTile.y )
		{
			Context.TilePos.x = 0;
			Context.TilePos.y += 4;
		}
		else
		{
			bDone = true;
		}

		return countbits( WorkSource.TileMask );
	}

	return 0;
}

void DoWork( FWorkContext Context, FWorkSourceType WorkSource, uint LocalItemIndex )
{
	uint TriIndex = WorkSource.TileID & 127;
	
	uint2 TilePos;
	TilePos.x = ( WorkSource.TileID >>  8 ) & 4095;
	TilePos.y = ( WorkSource.TileID >> 20 ) & 4095;
				
	uint BitIndex = FindSetBit( WorkSource.TileMask, LocalItemIndex );
	TilePos.x += BitIndex & 7;
	TilePos.y += BitIndex / 8;
	
	uint MinPixelPack = asuint( GroupVerts[ TriIndex + 128 ].x );
	int2 MinPixel;
	MinPixel.x = MinPixelPack & 0xffff;
	MinPixel.y = MinPixelPack >> 16;

	uint2 PixelPos = TilePos + MinPixel;
	if( all( PixelPos >= Context.Raster.ViewRect.xy && PixelPos < Context.Raster.ViewRect.zw ) )
	{
		float3 DepthPlane = GroupVerts[ TriIndex ];
		float ZX = dot( DepthPlane, float3( TilePos, 1 ) );
		
		uint PixelValue = Context.PixelValue | TriIndex;

		WritePixel( PixelValue, PixelPos, ZX, Context.Raster );
	}
}

#define DISTRIBUTE		0//COMPILER_SUPPORTS_WAVE_VOTE
#if DISTRIBUTE
#define THREADGROUP_SIZE	64
//#define GENERATE_WORK
#include "../WorkDistribution.ush"

void RasterizeTri_Distribute( FRaster Raster, FRasterTri Tri, uint PixelValue, uint GroupIndex )
{
	FWorkContext Context;
	Context.Raster		= Raster;
	Context.Tri			= Tri;
	Context.PixelValue	= PixelValue;
	
	Context.TilePos = 0;
	Context.MaxTile = Tri.MaxPixel - Tri.MinPixel;
	
	GroupMemoryBarrierWithGroupSync();
	
	if( Tri.bIsValid )
	{
		uint MinPixel = Tri.MinPixel.x | ( Tri.MinPixel.y << 16 );
		GroupVerts[ GroupIndex ] = Tri.DepthPlane;
		GroupVerts[ GroupIndex + 128 ].x = asfloat( MinPixel );
	}

#ifdef GENERATE_WORK
	DistributeWork( Context, GroupIndex );
#else
	bool bDone = false;
	while( WaveActiveAnyTrue( !bDone ) )
	{
		FWorkSourceType WorkSource;
		uint NumPixels = GenerateWork( Context, GroupIndex, WorkSource, bDone );

#if 1
		DistributeWork( Context, GroupIndex, WorkSource, NumPixels );
#else
		for( uint i = 0; i < NumPixels; i++ )
		{
			DoWork( Context, WorkSource, i );
		}
#endif
	}
#endif
}
#endif

// Default cull mode is CW. If this returns true, CCW culling is required
bool ReverseWindingOrder(FInstanceSceneData InstanceData)
{
	// Negative determinant sign for non uniform scale means
	// that an odd number of components are negative, so
	// we need to reverse the triangle winding order.
	bool bReverseInstanceCull = (InstanceData.DeterminantSign < 0.0f);
	bool bRasterStateReverseCull = (RenderFlags & NANITE_RENDER_FLAG_REVERSE_CULLING);
	
	// Logical XOR
	return (bReverseInstanceCull != bRasterStateReverseCull);
}

StructuredBuffer< uint2 >	InTotalPrevDrawClusters;
Buffer<uint>				InClusterOffsetSWHW;

[numthreads(64, 1, 1)]
void MicropolyRasterize(
	uint	VisibleIndex	: SV_GroupID,
	uint	GroupIndex		: SV_GroupIndex) 
{
#if HAS_PREV_DRAW_DATA
	VisibleIndex += InTotalPrevDrawClusters[0].x;
#endif
#if ADD_CLUSTER_OFFSET
	VisibleIndex += InClusterOffsetSWHW[0];
#endif

	// Should be all scalar.
	FVisibleCluster VisibleCluster = GetVisibleCluster( VisibleIndex, VIRTUAL_TEXTURE_TARGET );
	FInstanceSceneData InstanceData = GetInstanceSceneData( VisibleCluster.InstanceId, false );
	FNaniteView NaniteView = GetNaniteView( VisibleCluster.ViewId );
	
	// Virtual shadow maps can scatter instances into different physical pages for caching purposes
	bool bVirtualTargetStaticPage = false;
#if VIRTUAL_TEXTURE_TARGET
	bVirtualTargetStaticPage = ShouldCacheInstanceAsStatic( InstanceData );
#endif

#if CLUSTER_PER_PAGE
	// Scalar
	uint2 vPage = VisibleCluster.vPage;
	uint2 pPageAddress = ShadowGetPhysicalPage( CalcPageTableLevelOffset( NaniteView.TargetLayerIndex, NaniteView.TargetMipLevel ) + CalcPageOffsetInLevel( NaniteView.TargetMipLevel, vPage ) ).PhysicalAddress;	
	WritePixelPageTranslation PageTranslation = InitializeWritePixelPageTranslation();
	// We can just move the physical page address we're rasterizing into
	pPageAddress += bVirtualTargetStaticPage ? GetVirtualShadowMapStaticPixelOffset() >> VSM_LOG2_PAGE_SIZE : uint2( 0, 0 );
#else
	// Per-pixel page translation means we need to pass through an offset to WritePixel
	WritePixelPageTranslation PageTranslation = InitializeWritePixelPageTranslation( NaniteView, bVirtualTargetStaticPage );
#endif

	FInstanceDynamicData InstanceDynamicData = CalculateInstanceDynamicData(NaniteView, InstanceData);

	float2 SubpixelScale = float2(0.5, -0.5) * NaniteView.ViewSizeAndInvSize.xy * SUBPIXEL_SAMPLES;
	float2 SubpixelBias = (0.5 * NaniteView.ViewSizeAndInvSize.xy + NaniteView.ViewRect.xy) * SUBPIXEL_SAMPLES + 0.5f;
#if CLUSTER_PER_PAGE
	SubpixelBias += ( (float2)pPageAddress - (float2)vPage ) * VSM_PAGE_SIZE * SUBPIXEL_SAMPLES;
#endif

	FCluster Cluster = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);

	UNROLL
	for( uint i = 0; i < 4; i++ )
	{
		uint VertIndex = GroupIndex + i * 64;
		if( VertIndex < Cluster.NumVerts )
		{
			// Transform vertex and store in group shared memory.
			float3 PointLocal = DecodePosition( VertIndex, Cluster );
			float4 PointClipSubpixel = mul( mul( float4( PointLocal, 1 ), InstanceDynamicData.LocalToTranslatedWorld ), NaniteView.TranslatedWorldToClip );

			float3 Subpixel = PointClipSubpixel.xyz / PointClipSubpixel.w;
			Subpixel.xy = Subpixel.xy * SubpixelScale.xy + SubpixelBias.xy;

			GroupVerts[ VertIndex ] = float3(floor(Subpixel.xy), Subpixel.z);
		}
	}
	
	GroupMemoryBarrierWithGroupSync();

	int4 ViewRect = NaniteView.ViewRect;

#if CLUSTER_PER_PAGE
	ViewRect.xy = pPageAddress * VSM_PAGE_SIZE;
	ViewRect.zw = ViewRect.xy + VSM_PAGE_SIZE;
#endif

	FRaster Raster;
	Raster.NaniteView		= NaniteView;
	Raster.ViewRect			= ViewRect;
#if VISUALIZE
	Raster.VisualizeValues	= GetVisualizeValues();
#endif
	Raster.PageTranslation	= PageTranslation;

	UNROLL
	for( uint i = 0; i < 2; i++ )
	{
		uint TriIndex = GroupIndex + i * 64;
		uint3 VertIndexes = 0;
		if( TriIndex < Cluster.NumTris )
		{
			VertIndexes = ReadTriangleIndices(Cluster, TriIndex);
			if (ReverseWindingOrder(InstanceData))
			{
				VertIndexes.yz = VertIndexes.zy;
			}
		}
	
		float3 Verts[3];
		Verts[0] = GroupVerts[ VertIndexes.x ];
		Verts[1] = GroupVerts[ VertIndexes.y ];
		Verts[2] = GroupVerts[ VertIndexes.z ];

		FRasterTri Tri = SetupTriangle( Raster, Verts );

		uint PixelValue = (VisibleIndex + 1) << 7;

	#if COMPILER_SUPPORTS_WAVE_VOTE
		uint NumLanes = WaveGetLaneCount();
		float Work =float( Tri.MaxPixel.x - Tri.MinPixel.x + 1.0f ) *
					float( Tri.MaxPixel.y - Tri.MinPixel.y + 1.0f );
		float MaxWork = WaveActiveMax( Work );
		float SumWork = WaveActiveSum( Work );

		// Distribute when average < max/2
		bool bDistribute = SumWork < MaxWork * (0.5 * NumLanes) && MaxWork > 32;
		bool bScanline = WaveActiveAnyTrue( Tri.MaxPixel.x - Tri.MinPixel.x > 4 );
	#else
		bool bDistribute = false;
		bool bScanline = false;
	#endif

	#if DISTRIBUTE
		if( bDistribute )
		{
			// Seems like doing the micro triangles immediately instead of distributing them would be faster but apparently not.
			RasterizeTri_Distribute( Raster, Tri, PixelValue, GroupIndex );
		}
		else
	#endif
		if( Tri.bIsValid )
		{
			PixelValue |= TriIndex;

			if( bScanline )
			{
				RasterizeTri_Scanline( Raster, Tri, PixelValue );
			}
			else
			{
				RasterizeTri_Rect( Raster, Tri, PixelValue );
			}
		}
	}
}

#define PIXEL_VALUE					(RASTER_TECHNIQUE != RASTER_TECHNIQUE_DEPTHONLY)
#define VERTEX_TO_TRIANGLE_MASKS	(NANITE_PRIM_SHADER && PIXEL_VALUE)

struct VSOut
{
#if !NEAR_CLIP
	float2 ClipZW							: TEXCOORD0;
#endif
#if PIXEL_VALUE
	nointerpolation uint PixelValue			: TEXCOORD1;
#endif
#if NANITE_MULTI_VIEW
	nointerpolation int4 ViewRect			: TEXCOORD2;
#endif
#if VISUALIZE
	nointerpolation uint2 VisualizeValues	: TEXCOORD3;
#endif
#if VIRTUAL_TEXTURE_TARGET
	nointerpolation uint PackedPageInfo		: TEXCOORD4;
#endif
#if VERTEX_TO_TRIANGLE_MASKS
	CUSTOM_INTERPOLATION uint4 ToTriangleMasks	: TEXCOORD5;
#endif
#if NANITE_MESH_SHADER_INTERP == 1
	float4 InterpPosition					: TEXCOORD6;
#endif
	float4 Position							: SV_Position;
};

VSOut CommonRasterizerVS(FNaniteView NaniteView, FInstanceSceneData InstanceData, FVisibleCluster VisibleCluster, FCluster Cluster, uint VertIndex, float3 WorldPositionOffset, out float4 PointClipNoScaling)
{
	VSOut Out;

	float4x4 LocalToTranslatedWorld = LWCMultiplyTranslation(InstanceData.LocalToWorld, NaniteView.PreViewTranslation);
	float3 PointLocal = DecodePosition( VertIndex, Cluster );
	float3 PointRotated = LocalToTranslatedWorld[0].xyz * PointLocal.xxx + LocalToTranslatedWorld[1].xyz * PointLocal.yyy + LocalToTranslatedWorld[2].xyz * PointLocal.zzz;
	float3 PointTranslatedWorld = PointRotated + LocalToTranslatedWorld[3].xyz + WorldPositionOffset;
	float4 PointClip = mul( float4( PointTranslatedWorld, 1 ), NaniteView.TranslatedWorldToClip );
	PointClipNoScaling = PointClip;
#if CLUSTER_PER_PAGE
	/*
	float2 vUV = PointClip.xy * float2(0.5, -0.5) + 0.5 * PointClip.w;
	float2 vPixels = vUV * NaniteView.ViewSizeAndInvSize.xy;
	float2 LocalPixels = vPixels - VisibleCluster.vPage * VSM_PAGE_SIZE * PointClip.w;
	float2 LocalUV = LocalPixels / ( 4 * VSM_PAGE_SIZE );
	float2 LocalClip = LocalUV * float2(2, -2) + float2(-1, 1) * PointClip.w;
	PointClip.xy = LocalClip;
	*/
	PointClip.xy = NaniteView.ClipSpaceScaleOffset.xy * PointClip.xy + NaniteView.ClipSpaceScaleOffset.zw * PointClip.w;

	// Offset 0,0 to be at vPage for a 0, VSM_PAGE_SIZE * VSM_RASTER_WINDOW_PAGES viewport.
	PointClip.xy += PointClip.w * ( float2(-2, 2) / VSM_RASTER_WINDOW_PAGES ) * VisibleCluster.vPage;

	Out.ViewRect.xy = VisibleCluster.vPage * VSM_PAGE_SIZE;
	Out.ViewRect.zw = NaniteView.ViewRect.zw;
#elif NANITE_MULTI_VIEW
	PointClip.xy = NaniteView.ClipSpaceScaleOffset.xy * PointClip.xy + NaniteView.ClipSpaceScaleOffset.zw * PointClip.w;
	Out.ViewRect = NaniteView.ViewRect;
#endif
#if VIRTUAL_TEXTURE_TARGET
	FPageInfo PageInfo;
	PageInfo.ViewId = VisibleCluster.ViewId;
	PageInfo.bStaticPage = ShouldCacheInstanceAsStatic( InstanceData );
	Out.PackedPageInfo = PackPageInfo( PageInfo );
#endif
	Out.Position = PointClip;
#if !NEAR_CLIP
	Out.ClipZW = PointClip.zw;
#endif

	// Shader workaround to avoid HW depth clipping. Should be replaced with rasterizer state ideally.
#if !NEAR_CLIP
	Out.Position.z = 0.5f * Out.Position.w;
#endif

#if NANITE_MESH_SHADER_INTERP == 1
	Out.InterpPosition = Out.Position;
#endif

#if VISUALIZE
	Out.VisualizeValues = GetVisualizeValues();
#endif
	return Out;
}

#if NANITE_PRIM_SHADER

#pragma argument(wavemode=wave64)
#pragma argument(realtypes)

struct PrimitiveInput
{
	uint Index		: PRIM_SHADER_SEM_VERT_INDEX;
	uint WaveIndex	: PRIM_SHADER_SEM_WAVE_INDEX;
};

struct PrimitiveOutput
{
	VSOut Out;

	uint PrimExport	: PRIM_SHADER_SEM_PRIM_EXPORT;
	uint VertCount	: PRIM_SHADER_SEM_VERT_COUNT;
	uint PrimCount	: PRIM_SHADER_SEM_PRIM_COUNT;
};

uint PackTriangleExport(uint3 TriangleIndices)
{
    return TriangleIndices.x | (TriangleIndices.y << 10) | (TriangleIndices.z << 20);
}

uint3 UnpackTriangleExport(uint Packed)
{
	const uint Index0 = (Packed & 0x3FF);
	const uint Index1 = (Packed >> 10) & 0x3FF;
	const uint Index2 = (Packed >> 20);
	return uint3(Index0, Index1, Index2);
}

#if VERTEX_TO_TRIANGLE_MASKS
groupshared uint GroupVertexToTriangleMasks[256][4];
#endif
groupshared uint GroupTriangleCount;
groupshared uint GroupVertexCount;
groupshared uint GroupClusterIndex;

PRIM_SHADER_OUTPUT_TRIANGLES
PRIM_SHADER_PRIM_COUNT(1)
PRIM_SHADER_VERT_COUNT(1)
PRIM_SHADER_VERT_LIMIT(256)
PRIM_SHADER_AMP_FACTOR(128)
PRIM_SHADER_AMP_ENABLE
PrimitiveOutput HWRasterizeVS(PrimitiveInput Input)
{
	const uint LaneIndex = WaveGetLaneIndex();
	const uint LaneCount = WaveGetLaneCount();

	const uint GroupThreadID = LaneIndex + Input.WaveIndex * LaneCount;

	if (GroupThreadID == 0)
	{
		// Input index is only initialized for lane 0, so we need to manually communicate it to all other threads in subgroup (not just wavefront).
		GroupClusterIndex = Input.Index;
	}
	
	GroupMemoryBarrierWithGroupSync();

	uint VisibleIndex = GroupClusterIndex;
#if HAS_PREV_DRAW_DATA
	VisibleIndex += InTotalPrevDrawClusters[0].y;
#endif
#if ADD_CLUSTER_OFFSET
	VisibleIndex += InClusterOffsetSWHW[GetHWClusterCounterIndex(RenderFlags)];
#endif
	VisibleIndex = (MaxVisibleClusters - 1) - VisibleIndex;

	// Should be all scalar.
	FVisibleCluster VisibleCluster = GetVisibleCluster( VisibleIndex, VIRTUAL_TEXTURE_TARGET );
	FInstanceSceneData InstanceData = GetInstanceSceneData( VisibleCluster.InstanceId, false );
	FNaniteView NaniteView = GetNaniteView( VisibleCluster.ViewId );

	FInstanceDynamicData InstanceDynamicData = CalculateInstanceDynamicData(NaniteView, InstanceData);

	FCluster Cluster = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);

#if VERTEX_TO_TRIANGLE_MASKS
	if (GroupThreadID < Cluster.NumVerts)
	{
		GroupVertexToTriangleMasks[GroupThreadID][0] = 0;
		GroupVertexToTriangleMasks[GroupThreadID][1] = 0;
		GroupVertexToTriangleMasks[GroupThreadID][2] = 0;
		GroupVertexToTriangleMasks[GroupThreadID][3] = 0;
	}
#endif

	GroupMemoryBarrierWithGroupSync();

	PrimitiveOutput PrimOutput;
	PrimOutput.VertCount = Cluster.NumVerts;
	PrimOutput.PrimCount = Cluster.NumTris;

	bool bCullTriangle = false;

	if (GroupThreadID < Cluster.NumTris)
	{
		uint TriangleID = GroupThreadID;
		uint3 TriangleIndices = ReadTriangleIndices(Cluster, TriangleID);
		if (ReverseWindingOrder(InstanceData))
		{
			TriangleIndices = uint3(TriangleIndices.x, TriangleIndices.z, TriangleIndices.y);
		}

#if VERTEX_TO_TRIANGLE_MASKS
		const uint DwordIndex   = (GroupThreadID >> 5) & 3;
		const uint TriangleMask = 1 << (GroupThreadID & 31);
		InterlockedOr(GroupVertexToTriangleMasks[TriangleIndices.x][DwordIndex], TriangleMask);
		InterlockedOr(GroupVertexToTriangleMasks[TriangleIndices.y][DwordIndex], TriangleMask);
		InterlockedOr(GroupVertexToTriangleMasks[TriangleIndices.z][DwordIndex], TriangleMask);
#endif
		PrimOutput.PrimExport = PackTriangleExport(TriangleIndices);
	}

	GroupMemoryBarrierWithGroupSync();

	if (GroupThreadID < Cluster.NumVerts)
	{
		float4 PointClipNoScaling;
		float3 WorldPositionOffset = float3(0.0f, 0.0f, 0.0f); // TODO: PROG_RASTER
		PrimOutput.Out = CommonRasterizerVS(NaniteView, InstanceData, VisibleCluster, Cluster, GroupThreadID, WorldPositionOffset, PointClipNoScaling);
#if VERTEX_TO_TRIANGLE_MASKS
		PrimOutput.Out.PixelValue = ((VisibleIndex + 1) << 7);
		PrimOutput.Out.ToTriangleMasks = uint4(GroupVertexToTriangleMasks[GroupThreadID][0],
											   GroupVertexToTriangleMasks[GroupThreadID][1],
											   GroupVertexToTriangleMasks[GroupThreadID][2],
											   GroupVertexToTriangleMasks[GroupThreadID][3]);
#endif
	}

	return PrimOutput;
}

#elif NANITE_MESH_SHADER

struct PrimitiveAttributes
{
	// Use uint4 to prevent compiler from erroneously packing per-vertex and per-prim attributes together
	// .x = Cluster Index
	// .y = Triangle Index
	// .z = View Width
	// .w = View Height
	nointerpolation uint4 PackedData : TEXCOORD7;
};

#if MESHSHADER

MESH_SHADER_TRIANGLE_ATTRIBUTES(NANITE_MESH_SHADER_TG_SIZE)
void HWRasterizeMS(
	uint GroupThreadID : SV_GroupThreadID,
	uint GroupID : SV_GroupID,
	MESH_SHADER_VERTEX_EXPORT(VSOut, 256),
	MESH_SHADER_TRIANGLE_EXPORT(128),
	MESH_SHADER_PRIMITIVE_EXPORT(PrimitiveAttributes, 128)
)
{
	uint VisibleIndex = GroupID;
#if HAS_PREV_DRAW_DATA
	VisibleIndex += InTotalPrevDrawClusters[0].y;
#endif
#if ADD_CLUSTER_OFFSET
	VisibleIndex += InClusterOffsetSWHW[GetHWClusterCounterIndex(RenderFlags)];
#endif
	VisibleIndex = (MaxVisibleClusters - 1) - VisibleIndex;

	FVisibleCluster VisibleCluster = GetVisibleCluster(VisibleIndex, VIRTUAL_TEXTURE_TARGET);
	FInstanceSceneData InstanceData = GetInstanceSceneData(VisibleCluster.InstanceId, false);

	FNaniteView NaniteView = GetNaniteView(VisibleCluster.ViewId);
	FCluster Cluster = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);

	SetMeshOutputCounts(Cluster.NumVerts, Cluster.NumTris);

	if (GroupThreadID < Cluster.NumTris)
	{
		uint TriangleIndex = GroupThreadID;
		uint3 TriangleIndices = ReadTriangleIndices(Cluster, TriangleIndex);
		if (ReverseWindingOrder(InstanceData))
		{
			TriangleIndices = uint3(TriangleIndices.x, TriangleIndices.z, TriangleIndices.y);
		}

		MESH_SHADER_WRITE_TRIANGLE(TriangleIndex, TriangleIndices);

		PrimitiveAttributes Attributes;
		Attributes.PackedData.x = VisibleIndex;
		Attributes.PackedData.y = TriangleIndex;
		Attributes.PackedData.z = asuint(NaniteView.ViewSizeAndInvSize.x);
		Attributes.PackedData.w = asuint(NaniteView.ViewSizeAndInvSize.y);
		MESH_SHADER_WRITE_PRIMITIVE(TriangleIndex, Attributes);
	}

	float3 WorldPositionOffset = float3(0.0f, 0.0f, 0.0f); // TODO: PROG_RASTER

	const uint Vertex0 = GroupThreadID + 0;
	if (Vertex0 < Cluster.NumVerts)
	{
		float4 PointClipNoScaling;
		VSOut VertexOutput = CommonRasterizerVS(NaniteView, InstanceData, VisibleCluster, Cluster, Vertex0, WorldPositionOffset, PointClipNoScaling);
		MESH_SHADER_WRITE_VERTEX(Vertex0, VertexOutput);
	}

#if NANITE_MESH_SHADER_TG_SIZE == 128
	const uint Vertex1 = GroupThreadID + 128;
	if (Vertex1 < Cluster.NumVerts)
	{
		float4 PointClipNoScaling;
		VSOut VertexOutput = CommonRasterizerVS(NaniteView, InstanceData, VisibleCluster, Cluster, Vertex1, WorldPositionOffset, PointClipNoScaling);
		MESH_SHADER_WRITE_VERTEX(Vertex1, VertexOutput);
	}
#endif
}

#endif // MESHSHADER

#else // NANITE_MESH_SHADER / NANITE_PRIM_SHADER

VSOut HWRasterizeVS(
	uint VertexID		: SV_VertexID,
	uint VisibleIndex	: SV_InstanceID
	)
{
#if HAS_PREV_DRAW_DATA
	VisibleIndex += InTotalPrevDrawClusters[0].y;
#endif

#if ADD_CLUSTER_OFFSET
	VisibleIndex += InClusterOffsetSWHW[GetHWClusterCounterIndex(RenderFlags)];
#endif
	VisibleIndex = (MaxVisibleClusters - 1) - VisibleIndex;

	uint TriIndex = VertexID / 3;
	VertexID = VertexID - TriIndex * 3;

	VSOut Out;
	Out.Position = float4(0,0,0,1);
#if !NEAR_CLIP
	Out.ClipZW = float2(0,0);
#endif

	FVisibleCluster VisibleCluster = GetVisibleCluster( VisibleIndex, VIRTUAL_TEXTURE_TARGET );
	FInstanceSceneData InstanceData = GetInstanceSceneData( VisibleCluster.InstanceId, false );

	FNaniteView NaniteView = GetNaniteView( VisibleCluster.ViewId );
	FCluster Cluster = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);

	if( TriIndex < Cluster.NumTris )
	{
		uint3 TriangleIndices = ReadTriangleIndices( Cluster, TriIndex );
		if( ReverseWindingOrder( InstanceData ) )
		{
			TriangleIndices = uint3( TriangleIndices.x, TriangleIndices.z, TriangleIndices.y );
		}

		float3 WorldPositionOffset = float3(0.0f, 0.0f, 0.0f); // TODO: PROG_RASTER

	#if IS_NANITE_RASTER_PASS
		FVertexFactoryInput Input = (FVertexFactoryInput)0;
		FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);

		 // TODO: PROG_RASTER

		float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);	
		FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, float3(0, 0, 0) /*WorldPosition.xyz*/, TangentToLocal);
	#endif

		uint VertIndex = TriangleIndices[ VertexID ];
		float4 PointClipNoScaling;
		Out = CommonRasterizerVS(NaniteView, InstanceData, VisibleCluster, Cluster, VertIndex, WorldPositionOffset, PointClipNoScaling);
	#if PIXEL_VALUE
		Out.PixelValue  = ((VisibleIndex + 1) << 7) | TriIndex;
	#endif
	}

	return Out;
}

#endif // NANITE_PRIM_SHADER

#if NANITE_MESH_SHADER
void HWRasterizePS(VSOut In, PrimitiveAttributes Primitive)
#else
void HWRasterizePS(VSOut In)
#endif
{
	// TODO: PROG_RASTER (Resolve view and patch multi-view)

#if NANITE_MESH_SHADER_INTERP == 1
	float3 InterpPos = In.InterpPosition.xyz / In.InterpPosition.www;
	InterpPos.xy = (InterpPos.xy * float2(0.5f, -0.5f)) + 0.5f;
	InterpPos.xy *= float2(asfloat(Primitive.PackedData.z), asfloat(Primitive.PackedData.w)); // ViewSize
	uint2 PixelPos = (uint2)InterpPos.xy;
#else
	uint2 PixelPos = (uint2)In.Position.xy;
#endif

	uint PixelValue = 0;
#if PIXEL_VALUE
	PixelValue = In.PixelValue;
#endif

#if VERTEX_TO_TRIANGLE_MASKS
	uint4 Masks0 = LoadParameterCacheP0( In.ToTriangleMasks );
	uint4 Masks1 = LoadParameterCacheP1( In.ToTriangleMasks );
	uint4 Masks2 = LoadParameterCacheP2( In.ToTriangleMasks );

	uint4 Masks = Masks0 & Masks1 & Masks2;
	uint TriangleIndex =	Masks.x ? firstbitlow( Masks.x ) :
							Masks.y ? firstbitlow( Masks.y ) + 32 :
							Masks.z ? firstbitlow( Masks.z ) + 64 :
							firstbitlow( Masks.w ) + 96;

	PixelValue += TriangleIndex;
#endif

#if NANITE_MESH_SHADER
	const uint ClusterIndex  = Primitive.PackedData.x;
	const uint TriangleIndex = Primitive.PackedData.y;
	PixelValue = ((ClusterIndex + 1) << 7) | TriangleIndex;
#endif

#if CLUSTER_PER_PAGE
	PixelPos += In.ViewRect.xy;
	if (all(PixelPos < In.ViewRect.zw))
#elif NANITE_MULTI_VIEW
	// In multi-view mode every view has its own scissor, so we have to scissor manually.
	if (all(PixelPos >= In.ViewRect.xy && PixelPos < In.ViewRect.zw))
#endif
	{
	#if NEAR_CLIP
		float DeviceZ = In.Position.z;
	#else
		float DeviceZ = In.ClipZW.x / In.ClipZW.y;
	#endif
		
	#if VIRTUAL_TEXTURE_TARGET
		FPageInfo PageInfo = UnpackPageInfo(In.PackedPageInfo);
		const FNaniteView NaniteView = GetNaniteView(PageInfo.ViewId);
		WritePixelPageTranslation PageTranslation = InitializeWritePixelPageTranslation(NaniteView, PageInfo.bStaticPage);
	#else
		const FNaniteView NaniteView = GetNaniteView(0);
		WritePixelPageTranslation PageTranslation = InitializeWritePixelPageTranslation();
	#endif

		float MaterialMask = 1.0f; // TODO: PROG_RASTER
		float MaterialDepthOffset = 0.0f; // TODO: PROG_RASTER

	#if IS_NANITE_RASTER_PASS
		const uint DepthInt = asuint(DeviceZ);
		const UlongType PackedPixel = PackUlongType(uint2(PixelValue, DepthInt));

		FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

		// Material parameter inputs
		
		FMaterialPixelParameters MaterialParameters = FetchNaniteMaterialPixelParameters(NaniteView, PackedPixel, Interpolants, In.Position /*SvPosition*/);
		FPixelMaterialInputs PixelMaterialInputs;
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, In.Position /*SvPosition*/, true /* bIsFrontFace */);

		 // TODO: PROG_RASTER
	#endif

		DeviceZ += MaterialDepthOffset;

		if (MaterialMask >= 0)
		{
			WritePixel(OutVisBuffer64, PixelValue, PixelPos, DeviceZ, PageTranslation);
		#if VISUALIZE
			WritePixel(OutDbgBuffer64, In.VisualizeValues.x, PixelPos, DeviceZ, PageTranslation);
			//InterlockedAdd(OutDbgBuffer32[PixelPos], In.VisualizeValues.y);
            OutDbgBuffer32[PixelPos] += In.VisualizeValues.y;
		#endif
		}
	}
}
